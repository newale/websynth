{"version":3,"sources":["modules/core/core.context.ts","components/oscillator/index.tsx","modules/oscillators/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createContext","audioContext","AudioContext","Oscillator","props","oscillator","state","power","handlePowerCheckbox","bind","this","context","createOscillator","type","frequency","setValueAtTime","currentTime","connect","destination","start","stop","event","setState","console","log","name","checked","onChange","Component","contextType","CoreContext","Oscillators","oscs","oscillatorType","onAddOscillatorHandler","push","App","className","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0LAMeA,G,YAAAA,wBAA2B,CAAEC,aAAc,IAAIC,gB,0CCMzCC,E,YAInB,WAAYC,GAAyB,IAAD,8BAClC,4CAAMA,KAHAC,gBAE4B,EAElC,EAAKC,MAAQ,CACXC,OAAO,GAGT,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBANO,E,iFAUlCC,KAAKL,WAAaK,KAAKC,QAAQV,aAAaW,mBAC5CF,KAAKL,WAAWQ,KAAO,OACvBH,KAAKL,WAAWS,UAAUC,eAAeL,KAAKN,MAAMU,UAAWJ,KAAKC,QAAQV,aAAae,aACzFN,KAAKL,WAAWY,QAAQP,KAAKC,QAAQV,aAAaiB,aAClDR,KAAKL,WAAWc,U,2CAIbT,KAAKJ,MAAMC,MACZG,KAAKL,WAAWc,QAEhBT,KAAKL,WAAWe,S,0CAIAC,GAClBX,KAAKY,SAAS,CACZf,OAAQG,KAAKJ,MAAMC,U,+BAOrB,OAFAgB,QAAQC,IAAId,KAAKJ,MAAMC,OAGrB,oCACE,+BACE,2BAAOkB,KAAK,QAAQZ,KAAK,WAAWa,QAAShB,KAAKJ,MAAMC,MAAOoB,SAAUjB,KAAKF,4B,GAzChDoB,aAAnBzB,EACZ0B,YAAcC,E,ICLjBC,E,YAKJ,WAAY3B,GAAa,IAAD,8BACtB,4CAAMA,KALR4B,KAA8B,GAIN,EAHxBC,eAAiC,OAK/B,EAAKC,uBAAyB,EAAKA,uBAAuBzB,KAA5B,gBAFR,E,sFAMtB,IAAMJ,EAAaK,KAAKC,QAAQV,aAAaW,mBAC7CP,EAAWQ,KAAOH,KAAKuB,eACvB5B,EAAWS,UAAUC,eAAe,IAAKL,KAAKC,QAAQV,aAAae,aACnEX,EAAWY,QAAQP,KAAKC,QAAQV,aAAaiB,aAC7CR,KAAKsB,KAAKG,KAAK9B,GACfkB,QAAQC,IAAId,KAAKsB,Q,+BAIjB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAYnB,KAAK,OAAOC,UAAW,MACnC,kBAAC,EAAD,CAAYD,KAAK,OAAOC,UAAW,W,GAvBjBc,aAApBG,EAGGF,YAAc3B,EAoCR6B,QC5BAK,EAdO,WACpB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAYC,SAAb,CACEC,MAAO,CACLtC,aAAc,IAAIC,eAGpB,kBAAC,EAAD,SCDYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2e79c117.chunk.js","sourcesContent":["import { createContext } from 'react';\n\ntype CoreContext = {\n  audioContext: AudioContext\n}\n\nexport default createContext<CoreContext>({ audioContext: new AudioContext() });\n","import React, { Component } from 'react';\nimport CoreContext from '../../modules/core/core.context'\n\ntype OscillatorProps = {\n  type: string,\n  frequency: number\n}\n\ntype OscillatorState = {\n  power: boolean,\n}\n\nexport default class Oscillator extends Component<OscillatorProps, OscillatorState> {\n  static contextType = CoreContext;\n  private oscillator!: OscillatorNode;\n\n  constructor(props: OscillatorProps) {\n    super(props);\n    this.state = {\n      power: true,\n    }\n\n    this.handlePowerCheckbox = this.handlePowerCheckbox.bind(this)\n  }\n\n  componentDidMount(): void {\n    this.oscillator = this.context.audioContext.createOscillator();\n    this.oscillator.type = \"sine\";\n    this.oscillator.frequency.setValueAtTime(this.props.frequency, this.context.audioContext.currentTime);\n    this.oscillator.connect(this.context.audioContext.destination);\n    this.oscillator.start();\n  }\n\n  componentDidUpdate(): void {\n    if(this.state.power) {\n      this.oscillator.start();\n    } else {\n      this.oscillator.stop();\n    }\n  }\n\n  handlePowerCheckbox(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      power: !this.state.power,\n    });\n  }\n\n  render() {\n    console.log(this.state.power);\n    \n    return (\n      <>\n        <label>\n          <input name=\"power\" type=\"checkbox\" checked={this.state.power} onChange={this.handlePowerCheckbox}/>\n        </label>\n        {/* <button onClick={start()}>Start</button> */}\n        {/* <button onClick={stop()}>Stop</button> */}\n      </>\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport AudioContext from '../core/core.context';\nimport Oscillator from '../../components/oscillator';\n\ntype OscillatorsState = {\n  oscs: Array<OscillatorNode>\n}\n\nclass Oscillators extends Component<{}, OscillatorsState> {\n  oscs: Array<OscillatorNode> = [];\n  oscillatorType: OscillatorType = \"sine\";\n  static contextType = AudioContext;\n\n  constructor(props: any) {\n    super(props);\n    this.onAddOscillatorHandler = this.onAddOscillatorHandler.bind(this)\n  }\n\n  onAddOscillatorHandler() {\n    const oscillator = this.context.audioContext.createOscillator();\n    oscillator.type = this.oscillatorType;\n    oscillator.frequency.setValueAtTime(440, this.context.audioContext.currentTime);\n    oscillator.connect(this.context.audioContext.destination);\n    this.oscs.push(oscillator);\n    console.log(this.oscs);\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Oscillator type=\"sine\" frequency={400} />\n        <Oscillator type=\"sine\" frequency={400} />\n        {/* <select value={this.oscillatorType}>\n          <option value=\"sine\">sine</option>\n          <option value=\"square\">square</option>\n          <option value=\"sawtooth\">sawtooth</option>\n          <option value=\"triangle\">triangle</option>\n        </select>\n        <button onClick={this.onAddOscillatorHandler}>Add Osc</button>\n        <ul>{\n          this.oscs.map(oscillator => <li>{oscillator.type}</li>)\n        }</ul> */}\n      </Fragment>\n    );\n  }\n}\n\nexport default Oscillators;\n","import React from 'react';\nimport './App.css';\nimport CoreContext from './modules/core/core.context';\nimport Oscillators from './modules/oscillators';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CoreContext.Provider\n        value={{\n          audioContext: new AudioContext()\n        }}\n      >\n        <Oscillators />\n      </CoreContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}